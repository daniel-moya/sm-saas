// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.1.0
//   protoc               v5.28.0
// source: proto/integration.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "integration";

export enum Platform {
  PLATFORM_UNSPECIFIED = 0,
  PLATFORM_X = 1,
  PLATFORM_TWITTER = 1,
  PLATFORM_INSTAGRAM = 2,
  PLATFORM_FACEBOOK = 3,
  PLATFORM_TIKTOK = 4,
  UNRECOGNIZED = -1,
}

export function platformFromJSON(object: any): Platform {
  switch (object) {
    case 0:
    case "PLATFORM_UNSPECIFIED":
      return Platform.PLATFORM_UNSPECIFIED;
    case 1:
    case "PLATFORM_X":
      return Platform.PLATFORM_X;
    case 1:
    case "PLATFORM_TWITTER":
      return Platform.PLATFORM_TWITTER;
    case 2:
    case "PLATFORM_INSTAGRAM":
      return Platform.PLATFORM_INSTAGRAM;
    case 3:
    case "PLATFORM_FACEBOOK":
      return Platform.PLATFORM_FACEBOOK;
    case 4:
    case "PLATFORM_TIKTOK":
      return Platform.PLATFORM_TIKTOK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Platform.UNRECOGNIZED;
  }
}

export function platformToJSON(object: Platform): string {
  switch (object) {
    case Platform.PLATFORM_UNSPECIFIED:
      return "PLATFORM_UNSPECIFIED";
    case Platform.PLATFORM_X:
      return "PLATFORM_X";
    case Platform.PLATFORM_TWITTER:
      return "PLATFORM_TWITTER";
    case Platform.PLATFORM_INSTAGRAM:
      return "PLATFORM_INSTAGRAM";
    case Platform.PLATFORM_FACEBOOK:
      return "PLATFORM_FACEBOOK";
    case Platform.PLATFORM_TIKTOK:
      return "PLATFORM_TIKTOK";
    case Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LinkSocialAccountRequest {
  userId: string;
  platform: Platform;
  accessToken: string;
  secret: string;
}

export interface LinkSocialAccountResponse {
  message: string;
}

export interface UnlinkSocialAccountRequest {
  userId: string;
  socialMediaPlatform: string;
}

export interface UnlinkSocialAccountResponse {
  message: string;
}

function createBaseLinkSocialAccountRequest(): LinkSocialAccountRequest {
  return { userId: "", platform: 0, accessToken: "", secret: "" };
}

export const LinkSocialAccountRequest = {
  encode(message: LinkSocialAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.platform !== 0) {
      writer.uint32(16).int32(message.platform);
    }
    if (message.accessToken !== "") {
      writer.uint32(26).string(message.accessToken);
    }
    if (message.secret !== "") {
      writer.uint32(34).string(message.secret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkSocialAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkSocialAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.secret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkSocialAccountRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      platform: isSet(object.platform) ? platformFromJSON(object.platform) : 0,
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
    };
  },

  toJSON(message: LinkSocialAccountRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.platform !== 0) {
      obj.platform = platformToJSON(message.platform);
    }
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.secret !== "") {
      obj.secret = message.secret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkSocialAccountRequest>, I>>(base?: I): LinkSocialAccountRequest {
    return LinkSocialAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkSocialAccountRequest>, I>>(object: I): LinkSocialAccountRequest {
    const message = createBaseLinkSocialAccountRequest();
    message.userId = object.userId ?? "";
    message.platform = object.platform ?? 0;
    message.accessToken = object.accessToken ?? "";
    message.secret = object.secret ?? "";
    return message;
  },
};

function createBaseLinkSocialAccountResponse(): LinkSocialAccountResponse {
  return { message: "" };
}

export const LinkSocialAccountResponse = {
  encode(message: LinkSocialAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkSocialAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkSocialAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkSocialAccountResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: LinkSocialAccountResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkSocialAccountResponse>, I>>(base?: I): LinkSocialAccountResponse {
    return LinkSocialAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkSocialAccountResponse>, I>>(object: I): LinkSocialAccountResponse {
    const message = createBaseLinkSocialAccountResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUnlinkSocialAccountRequest(): UnlinkSocialAccountRequest {
  return { userId: "", socialMediaPlatform: "" };
}

export const UnlinkSocialAccountRequest = {
  encode(message: UnlinkSocialAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.socialMediaPlatform !== "") {
      writer.uint32(18).string(message.socialMediaPlatform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnlinkSocialAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlinkSocialAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.socialMediaPlatform = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnlinkSocialAccountRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      socialMediaPlatform: isSet(object.socialMediaPlatform) ? globalThis.String(object.socialMediaPlatform) : "",
    };
  },

  toJSON(message: UnlinkSocialAccountRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.socialMediaPlatform !== "") {
      obj.socialMediaPlatform = message.socialMediaPlatform;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnlinkSocialAccountRequest>, I>>(base?: I): UnlinkSocialAccountRequest {
    return UnlinkSocialAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnlinkSocialAccountRequest>, I>>(object: I): UnlinkSocialAccountRequest {
    const message = createBaseUnlinkSocialAccountRequest();
    message.userId = object.userId ?? "";
    message.socialMediaPlatform = object.socialMediaPlatform ?? "";
    return message;
  },
};

function createBaseUnlinkSocialAccountResponse(): UnlinkSocialAccountResponse {
  return { message: "" };
}

export const UnlinkSocialAccountResponse = {
  encode(message: UnlinkSocialAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnlinkSocialAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlinkSocialAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnlinkSocialAccountResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UnlinkSocialAccountResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnlinkSocialAccountResponse>, I>>(base?: I): UnlinkSocialAccountResponse {
    return UnlinkSocialAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnlinkSocialAccountResponse>, I>>(object: I): UnlinkSocialAccountResponse {
    const message = createBaseUnlinkSocialAccountResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type IntegrationServiceService = typeof IntegrationServiceService;
export const IntegrationServiceService = {
  linkSocialAccount: {
    path: "/integration.IntegrationService/LinkSocialAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LinkSocialAccountRequest) => Buffer.from(LinkSocialAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LinkSocialAccountRequest.decode(value),
    responseSerialize: (value: LinkSocialAccountResponse) =>
      Buffer.from(LinkSocialAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => LinkSocialAccountResponse.decode(value),
  },
  unlinkSocialAccount: {
    path: "/integration.IntegrationService/UnlinkSocialAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UnlinkSocialAccountRequest) =>
      Buffer.from(UnlinkSocialAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UnlinkSocialAccountRequest.decode(value),
    responseSerialize: (value: UnlinkSocialAccountResponse) =>
      Buffer.from(UnlinkSocialAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UnlinkSocialAccountResponse.decode(value),
  },
} as const;

export interface IntegrationServiceServer extends UntypedServiceImplementation {
  linkSocialAccount: handleUnaryCall<LinkSocialAccountRequest, LinkSocialAccountResponse>;
  unlinkSocialAccount: handleUnaryCall<UnlinkSocialAccountRequest, UnlinkSocialAccountResponse>;
}

export interface IntegrationServiceClient extends Client {
  linkSocialAccount(
    request: LinkSocialAccountRequest,
    callback: (error: ServiceError | null, response: LinkSocialAccountResponse) => void,
  ): ClientUnaryCall;
  linkSocialAccount(
    request: LinkSocialAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LinkSocialAccountResponse) => void,
  ): ClientUnaryCall;
  linkSocialAccount(
    request: LinkSocialAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LinkSocialAccountResponse) => void,
  ): ClientUnaryCall;
  unlinkSocialAccount(
    request: UnlinkSocialAccountRequest,
    callback: (error: ServiceError | null, response: UnlinkSocialAccountResponse) => void,
  ): ClientUnaryCall;
  unlinkSocialAccount(
    request: UnlinkSocialAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UnlinkSocialAccountResponse) => void,
  ): ClientUnaryCall;
  unlinkSocialAccount(
    request: UnlinkSocialAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UnlinkSocialAccountResponse) => void,
  ): ClientUnaryCall;
}

export const IntegrationServiceClient = makeGenericClientConstructor(
  IntegrationServiceService,
  "integration.IntegrationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): IntegrationServiceClient;
  service: typeof IntegrationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
